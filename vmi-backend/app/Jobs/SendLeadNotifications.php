<?php

declare(strict_types=1);

namespace App\Jobs;

use App\Mail\LeadCreatedMail;
use App\Models\Lead;
use App\Services\TelegramService;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;

class SendLeadNotifications implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    public int $tries = 3;
    public int $timeout = 15;

    public function __construct(public Lead $lead) {}

    public function handle(TelegramService $telegram): void
    {
        // 1) Email (–Ω–µ –≤–∞–ª–∏–º –¥–∂–æ–±—É, –µ—Å–ª–∏ –ø–æ—á—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
        $to = env('SALES_TO');
        if (!empty($to)) {
            try {
                Mail::to($to)->send(new LeadCreatedMail($this->lead));
            } catch (\Throwable $ex) {
                Log::error('Mail send failed', [
                    'to' => $to,
                    'error' => $ex->getMessage(),
                ]);
                // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî —Ç–µ–ª–µ–≥—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            }
        } else {
            Log::warning('SALES_TO is empty, skipping email notification.');
        }

        // 2) Telegram (–∫–∞–∫ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å: —Ä–∞–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –±–µ–∑ URL, –¢–∞—à–∫–µ–Ω—Ç)
        $title = $this->lead->type === 'product'
            ? 'üõí <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</b>'
            : 'üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>';

        $tz = config('app.timezone', 'UTC');
        $timeLocal = now()->setTimezone($tz)->format('d.m.Y H:i');

        $lines = [
            $title,
            '',
            '<b>–¢–∏–ø:</b> ' . e($this->lead->type),
            '<b>–ò–º—è:</b> ' . e($this->lead->name),
            '<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ' . e($this->lead->phone),
            '<b>Email:</b> ' . e($this->lead->email),
        ];
        if ($this->lead->message) {
            $lines[] = '<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ' . e($this->lead->message);
        }
        if ($this->lead->product_title) {
            $qty = (int)($this->lead->quantity ?? 1);
            $lines[] = 'üß© <b>–¢–æ–≤–∞—Ä:</b> ' . e($this->lead->product_title) . ' √ó ' . $qty;
        }
        // –ò—Å—Ç–æ—á–Ω–∏–∫ –∏ URL ‚Äî —É–±—Ä–∞–Ω—ã –ø–æ —Ç–≤–æ–µ–π –ø—Ä–æ—Å—å–±–µ
        $lines[] = 'üïí ' . $timeLocal . ' (–¢–∞—à–∫–µ–Ω—Ç)';

        $telegram->send(implode("\n", $lines));
    }

    public function failed(\Throwable $e): void
    {
        Log::error('SendLeadNotifications failed', [
            'lead_id' => $this->lead->id ?? null,
            'error'   => $e->getMessage(),
        ]);
    }
}
